"""
    Otoroshi Admin API

    Admin API of the Otoroshi reverse proxy  # noqa: E501

    The version of the OpenAPI document: 1.5.0-alpha.14
    Contact: oss@maif.fr
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.any import Any
from openapi_client.model.cert_valid_response import CertValidResponse
from openapi_client.model.done import Done
from openapi_client.model.error_response import ErrorResponse
from openapi_client.model.otoroshi_ssl_cert import OtoroshiSslCert
from openapi_client.model.otoroshi_ssl_pki_models_gen_cert_response import OtoroshiSslPkiModelsGenCertResponse
from openapi_client.model.otoroshi_ssl_pki_models_gen_csr_query import OtoroshiSslPkiModelsGenCsrQuery
from openapi_client.model.otoroshi_ssl_pki_models_gen_csr_response import OtoroshiSslPkiModelsGenCsrResponse
from openapi_client.model.otoroshi_ssl_pki_models_gen_key_pair_query import OtoroshiSslPkiModelsGenKeyPairQuery
from openapi_client.model.otoroshi_ssl_pki_models_gen_key_pair_response import OtoroshiSslPkiModelsGenKeyPairResponse
from openapi_client.model.otoroshi_ssl_pki_models_sign_cert_response import OtoroshiSslPkiModelsSignCertResponse


class PkiApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __otoroshi_controllers_adminapi_pki_controller_certificate_data(
            self,
            body,
            **kwargs
        ):
            """Extract data from a certificate  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.otoroshi_controllers_adminapi_pki_controller_certificate_data(body, async_req=True)
            >>> result = thread.get()

            Args:
                body (str): request body

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Any
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.otoroshi_controllers_adminapi_pki_controller_certificate_data = _Endpoint(
            settings={
                'response_type': (Any,),
                'auth': [
                    'otoroshi_auth'
                ],
                'endpoint_path': '/api/pki/certs/_data',
                'operation_id': 'otoroshi_controllers_adminapi_pki_controller_certificate_data',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (str,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__otoroshi_controllers_adminapi_pki_controller_certificate_data
        )

        def __otoroshi_controllers_adminapi_pki_controller_certificate_is_valid(
            self,
            otoroshi_ssl_cert,
            **kwargs
        ):
            """Check if a certificate is valid (based on its own data)  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.otoroshi_controllers_adminapi_pki_controller_certificate_is_valid(otoroshi_ssl_cert, async_req=True)
            >>> result = thread.get()

            Args:
                otoroshi_ssl_cert (OtoroshiSslCert): request body

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                CertValidResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['otoroshi_ssl_cert'] = \
                otoroshi_ssl_cert
            return self.call_with_http_info(**kwargs)

        self.otoroshi_controllers_adminapi_pki_controller_certificate_is_valid = _Endpoint(
            settings={
                'response_type': (CertValidResponse,),
                'auth': [
                    'otoroshi_auth'
                ],
                'endpoint_path': '/api/pki/certs/_valid',
                'operation_id': 'otoroshi_controllers_adminapi_pki_controller_certificate_is_valid',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'otoroshi_ssl_cert',
                ],
                'required': [
                    'otoroshi_ssl_cert',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'otoroshi_ssl_cert':
                        (OtoroshiSslCert,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'otoroshi_ssl_cert': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__otoroshi_controllers_adminapi_pki_controller_certificate_is_valid
        )

        def __otoroshi_controllers_adminapi_pki_controller_gen_cert(
            self,
            ca,
            otoroshi_ssl_pki_models_gen_csr_query,
            **kwargs
        ):
            """Generates a certificate  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.otoroshi_controllers_adminapi_pki_controller_gen_cert(ca, otoroshi_ssl_pki_models_gen_csr_query, async_req=True)
            >>> result = thread.get()

            Args:
                ca (str): the ca parameter
                otoroshi_ssl_pki_models_gen_csr_query (OtoroshiSslPkiModelsGenCsrQuery): request body

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                OtoroshiSslPkiModelsGenCertResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['ca'] = \
                ca
            kwargs['otoroshi_ssl_pki_models_gen_csr_query'] = \
                otoroshi_ssl_pki_models_gen_csr_query
            return self.call_with_http_info(**kwargs)

        self.otoroshi_controllers_adminapi_pki_controller_gen_cert = _Endpoint(
            settings={
                'response_type': (OtoroshiSslPkiModelsGenCertResponse,),
                'auth': [
                    'otoroshi_auth'
                ],
                'endpoint_path': '/api/pki/cas/{ca}/certs',
                'operation_id': 'otoroshi_controllers_adminapi_pki_controller_gen_cert',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'ca',
                    'otoroshi_ssl_pki_models_gen_csr_query',
                ],
                'required': [
                    'ca',
                    'otoroshi_ssl_pki_models_gen_csr_query',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'ca':
                        (str,),
                    'otoroshi_ssl_pki_models_gen_csr_query':
                        (OtoroshiSslPkiModelsGenCsrQuery,),
                },
                'attribute_map': {
                    'ca': 'ca',
                },
                'location_map': {
                    'ca': 'path',
                    'otoroshi_ssl_pki_models_gen_csr_query': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__otoroshi_controllers_adminapi_pki_controller_gen_cert
        )

        def __otoroshi_controllers_adminapi_pki_controller_gen_csr(
            self,
            otoroshi_ssl_pki_models_gen_csr_query,
            **kwargs
        ):
            """Generates a CSR  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.otoroshi_controllers_adminapi_pki_controller_gen_csr(otoroshi_ssl_pki_models_gen_csr_query, async_req=True)
            >>> result = thread.get()

            Args:
                otoroshi_ssl_pki_models_gen_csr_query (OtoroshiSslPkiModelsGenCsrQuery): request body

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                OtoroshiSslPkiModelsGenCsrResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['otoroshi_ssl_pki_models_gen_csr_query'] = \
                otoroshi_ssl_pki_models_gen_csr_query
            return self.call_with_http_info(**kwargs)

        self.otoroshi_controllers_adminapi_pki_controller_gen_csr = _Endpoint(
            settings={
                'response_type': (OtoroshiSslPkiModelsGenCsrResponse,),
                'auth': [
                    'otoroshi_auth'
                ],
                'endpoint_path': '/api/pki/csrs',
                'operation_id': 'otoroshi_controllers_adminapi_pki_controller_gen_csr',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'otoroshi_ssl_pki_models_gen_csr_query',
                ],
                'required': [
                    'otoroshi_ssl_pki_models_gen_csr_query',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'otoroshi_ssl_pki_models_gen_csr_query':
                        (OtoroshiSslPkiModelsGenCsrQuery,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'otoroshi_ssl_pki_models_gen_csr_query': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__otoroshi_controllers_adminapi_pki_controller_gen_csr
        )

        def __otoroshi_controllers_adminapi_pki_controller_gen_key_pair(
            self,
            otoroshi_ssl_pki_models_gen_key_pair_query,
            **kwargs
        ):
            """Generates a keypair  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.otoroshi_controllers_adminapi_pki_controller_gen_key_pair(otoroshi_ssl_pki_models_gen_key_pair_query, async_req=True)
            >>> result = thread.get()

            Args:
                otoroshi_ssl_pki_models_gen_key_pair_query (OtoroshiSslPkiModelsGenKeyPairQuery): request body

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                OtoroshiSslPkiModelsGenKeyPairResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['otoroshi_ssl_pki_models_gen_key_pair_query'] = \
                otoroshi_ssl_pki_models_gen_key_pair_query
            return self.call_with_http_info(**kwargs)

        self.otoroshi_controllers_adminapi_pki_controller_gen_key_pair = _Endpoint(
            settings={
                'response_type': (OtoroshiSslPkiModelsGenKeyPairResponse,),
                'auth': [
                    'otoroshi_auth'
                ],
                'endpoint_path': '/api/pki/keys',
                'operation_id': 'otoroshi_controllers_adminapi_pki_controller_gen_key_pair',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'otoroshi_ssl_pki_models_gen_key_pair_query',
                ],
                'required': [
                    'otoroshi_ssl_pki_models_gen_key_pair_query',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'otoroshi_ssl_pki_models_gen_key_pair_query':
                        (OtoroshiSslPkiModelsGenKeyPairQuery,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'otoroshi_ssl_pki_models_gen_key_pair_query': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__otoroshi_controllers_adminapi_pki_controller_gen_key_pair
        )

        def __otoroshi_controllers_adminapi_pki_controller_gen_lets_encrypt_cert(
            self,
            body,
            **kwargs
        ):
            """Generates a certificates using Let's Encrypt or any ACME compatible system  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.otoroshi_controllers_adminapi_pki_controller_gen_lets_encrypt_cert(body, async_req=True)
            >>> result = thread.get()

            Args:
                body ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): request body

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                OtoroshiSslPkiModelsGenCertResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.otoroshi_controllers_adminapi_pki_controller_gen_lets_encrypt_cert = _Endpoint(
            settings={
                'response_type': (OtoroshiSslPkiModelsGenCertResponse,),
                'auth': [
                    'otoroshi_auth'
                ],
                'endpoint_path': '/api/pki/certs/_letencrypt',
                'operation_id': 'otoroshi_controllers_adminapi_pki_controller_gen_lets_encrypt_cert',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__otoroshi_controllers_adminapi_pki_controller_gen_lets_encrypt_cert
        )

        def __otoroshi_controllers_adminapi_pki_controller_gen_self_signed_ca(
            self,
            otoroshi_ssl_pki_models_gen_csr_query,
            **kwargs
        ):
            """Generates a self signed CA  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.otoroshi_controllers_adminapi_pki_controller_gen_self_signed_ca(otoroshi_ssl_pki_models_gen_csr_query, async_req=True)
            >>> result = thread.get()

            Args:
                otoroshi_ssl_pki_models_gen_csr_query (OtoroshiSslPkiModelsGenCsrQuery): request body

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                OtoroshiSslPkiModelsGenCertResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['otoroshi_ssl_pki_models_gen_csr_query'] = \
                otoroshi_ssl_pki_models_gen_csr_query
            return self.call_with_http_info(**kwargs)

        self.otoroshi_controllers_adminapi_pki_controller_gen_self_signed_ca = _Endpoint(
            settings={
                'response_type': (OtoroshiSslPkiModelsGenCertResponse,),
                'auth': [
                    'otoroshi_auth'
                ],
                'endpoint_path': '/api/pki/cas',
                'operation_id': 'otoroshi_controllers_adminapi_pki_controller_gen_self_signed_ca',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'otoroshi_ssl_pki_models_gen_csr_query',
                ],
                'required': [
                    'otoroshi_ssl_pki_models_gen_csr_query',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'otoroshi_ssl_pki_models_gen_csr_query':
                        (OtoroshiSslPkiModelsGenCsrQuery,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'otoroshi_ssl_pki_models_gen_csr_query': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__otoroshi_controllers_adminapi_pki_controller_gen_self_signed_ca
        )

        def __otoroshi_controllers_adminapi_pki_controller_gen_self_signed_cert(
            self,
            otoroshi_ssl_pki_models_gen_csr_query,
            **kwargs
        ):
            """Generates a self signed certificates  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.otoroshi_controllers_adminapi_pki_controller_gen_self_signed_cert(otoroshi_ssl_pki_models_gen_csr_query, async_req=True)
            >>> result = thread.get()

            Args:
                otoroshi_ssl_pki_models_gen_csr_query (OtoroshiSslPkiModelsGenCsrQuery): request body

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                OtoroshiSslPkiModelsGenCertResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['otoroshi_ssl_pki_models_gen_csr_query'] = \
                otoroshi_ssl_pki_models_gen_csr_query
            return self.call_with_http_info(**kwargs)

        self.otoroshi_controllers_adminapi_pki_controller_gen_self_signed_cert = _Endpoint(
            settings={
                'response_type': (OtoroshiSslPkiModelsGenCertResponse,),
                'auth': [
                    'otoroshi_auth'
                ],
                'endpoint_path': '/api/pki/certs',
                'operation_id': 'otoroshi_controllers_adminapi_pki_controller_gen_self_signed_cert',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'otoroshi_ssl_pki_models_gen_csr_query',
                ],
                'required': [
                    'otoroshi_ssl_pki_models_gen_csr_query',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'otoroshi_ssl_pki_models_gen_csr_query':
                        (OtoroshiSslPkiModelsGenCsrQuery,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'otoroshi_ssl_pki_models_gen_csr_query': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__otoroshi_controllers_adminapi_pki_controller_gen_self_signed_cert
        )

        def __otoroshi_controllers_adminapi_pki_controller_gen_sub_ca(
            self,
            ca,
            otoroshi_ssl_pki_models_gen_csr_query,
            **kwargs
        ):
            """Generates a sub-CA  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.otoroshi_controllers_adminapi_pki_controller_gen_sub_ca(ca, otoroshi_ssl_pki_models_gen_csr_query, async_req=True)
            >>> result = thread.get()

            Args:
                ca (str): the ca parameter
                otoroshi_ssl_pki_models_gen_csr_query (OtoroshiSslPkiModelsGenCsrQuery): request body

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                OtoroshiSslPkiModelsGenCertResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['ca'] = \
                ca
            kwargs['otoroshi_ssl_pki_models_gen_csr_query'] = \
                otoroshi_ssl_pki_models_gen_csr_query
            return self.call_with_http_info(**kwargs)

        self.otoroshi_controllers_adminapi_pki_controller_gen_sub_ca = _Endpoint(
            settings={
                'response_type': (OtoroshiSslPkiModelsGenCertResponse,),
                'auth': [
                    'otoroshi_auth'
                ],
                'endpoint_path': '/api/pki/cas/{ca}/cas',
                'operation_id': 'otoroshi_controllers_adminapi_pki_controller_gen_sub_ca',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'ca',
                    'otoroshi_ssl_pki_models_gen_csr_query',
                ],
                'required': [
                    'ca',
                    'otoroshi_ssl_pki_models_gen_csr_query',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'ca':
                        (str,),
                    'otoroshi_ssl_pki_models_gen_csr_query':
                        (OtoroshiSslPkiModelsGenCsrQuery,),
                },
                'attribute_map': {
                    'ca': 'ca',
                },
                'location_map': {
                    'ca': 'path',
                    'otoroshi_ssl_pki_models_gen_csr_query': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__otoroshi_controllers_adminapi_pki_controller_gen_sub_ca
        )

        def __otoroshi_controllers_adminapi_pki_controller_import_cert_from_p12(
            self,
            body,
            **kwargs
        ):
            """Import de .p12 file as client certificates  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.otoroshi_controllers_adminapi_pki_controller_import_cert_from_p12(body, async_req=True)
            >>> result = thread.get()

            Args:
                body (str): request body

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Done
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.otoroshi_controllers_adminapi_pki_controller_import_cert_from_p12 = _Endpoint(
            settings={
                'response_type': (Done,),
                'auth': [
                    'otoroshi_auth'
                ],
                'endpoint_path': '/api/pki/certs/_p12',
                'operation_id': 'otoroshi_controllers_adminapi_pki_controller_import_cert_from_p12',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                ],
                'required': [
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (str,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__otoroshi_controllers_adminapi_pki_controller_import_cert_from_p12
        )

        def __otoroshi_controllers_adminapi_pki_controller_sign_cert(
            self,
            ca,
            body,
            **kwargs
        ):
            """Sign a certificate based on a CSR  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.otoroshi_controllers_adminapi_pki_controller_sign_cert(ca, body, async_req=True)
            >>> result = thread.get()

            Args:
                ca (str): the ca parameter
                body (str): request body

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                OtoroshiSslPkiModelsSignCertResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['ca'] = \
                ca
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.otoroshi_controllers_adminapi_pki_controller_sign_cert = _Endpoint(
            settings={
                'response_type': (OtoroshiSslPkiModelsSignCertResponse,),
                'auth': [
                    'otoroshi_auth'
                ],
                'endpoint_path': '/api/pki/cas/{ca}/certs/_sign',
                'operation_id': 'otoroshi_controllers_adminapi_pki_controller_sign_cert',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'ca',
                    'body',
                ],
                'required': [
                    'ca',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'ca':
                        (str,),
                    'body':
                        (str,),
                },
                'attribute_map': {
                    'ca': 'ca',
                },
                'location_map': {
                    'ca': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__otoroshi_controllers_adminapi_pki_controller_sign_cert
        )
