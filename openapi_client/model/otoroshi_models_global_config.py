"""
    Otoroshi Admin API

    Admin API of the Otoroshi reverse proxy  # noqa: E501

    The version of the OpenAPI document: 1.5.0-alpha.14
    Contact: oss@maif.fr
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)
from ..model_utils import OpenApiModel
from openapi_client.exceptions import ApiAttributeError


def lazy_import():
    from openapi_client.model.otoroshi_models_auto_cert import OtoroshiModelsAutoCert
    from openapi_client.model.otoroshi_models_elastic_analytics_config import OtoroshiModelsElasticAnalyticsConfig
    from openapi_client.model.otoroshi_models_geolocation_settings import OtoroshiModelsGeolocationSettings
    from openapi_client.model.otoroshi_models_global_scripts import OtoroshiModelsGlobalScripts
    from openapi_client.model.otoroshi_models_ip_filtering import OtoroshiModelsIpFiltering
    from openapi_client.model.otoroshi_models_proxies import OtoroshiModelsProxies
    from openapi_client.model.otoroshi_models_snow_monkey_config import OtoroshiModelsSnowMonkeyConfig
    from openapi_client.model.otoroshi_models_tls_settings import OtoroshiModelsTlsSettings
    from openapi_client.model.otoroshi_models_user_agent_settings import OtoroshiModelsUserAgentSettings
    from openapi_client.model.otoroshi_models_webhook import OtoroshiModelsWebhook
    from openapi_client.model.otoroshi_script_plugins_plugins import OtoroshiScriptPluginsPlugins
    from openapi_client.model.otoroshi_utils_letsencrypt_lets_encrypt_settings import OtoroshiUtilsLetsencryptLetsEncryptSettings
    globals()['OtoroshiModelsAutoCert'] = OtoroshiModelsAutoCert
    globals()['OtoroshiModelsElasticAnalyticsConfig'] = OtoroshiModelsElasticAnalyticsConfig
    globals()['OtoroshiModelsGeolocationSettings'] = OtoroshiModelsGeolocationSettings
    globals()['OtoroshiModelsGlobalScripts'] = OtoroshiModelsGlobalScripts
    globals()['OtoroshiModelsIpFiltering'] = OtoroshiModelsIpFiltering
    globals()['OtoroshiModelsProxies'] = OtoroshiModelsProxies
    globals()['OtoroshiModelsSnowMonkeyConfig'] = OtoroshiModelsSnowMonkeyConfig
    globals()['OtoroshiModelsTlsSettings'] = OtoroshiModelsTlsSettings
    globals()['OtoroshiModelsUserAgentSettings'] = OtoroshiModelsUserAgentSettings
    globals()['OtoroshiModelsWebhook'] = OtoroshiModelsWebhook
    globals()['OtoroshiScriptPluginsPlugins'] = OtoroshiScriptPluginsPlugins
    globals()['OtoroshiUtilsLetsencryptLetsEncryptSettings'] = OtoroshiUtilsLetsencryptLetsEncryptSettings


class OtoroshiModelsGlobalConfig(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'geolocation_settings': (OtoroshiModelsGeolocationSettings,),  # noqa: E501
            'alerts_emails': ([str],),  # noqa: E501
            'throttling_quota': (int,),  # noqa: E501
            'max_webhook_size': (int,),  # noqa: E501
            'max_concurrent_requests': (int,),  # noqa: E501
            'clever_settings': (dict,),  # noqa: E501
            'endless_ip_addresses': ([str],),  # noqa: E501
            'plugins': (OtoroshiScriptPluginsPlugins,),  # noqa: E501
            'kafka_config': (dict,),  # noqa: E501
            'max_logs_size': (int,),  # noqa: E501
            'proxies': (OtoroshiModelsProxies,),  # noqa: E501
            'enable_embedded_metrics': (bool,),  # noqa: E501
            'elastic_reads_config': (dict,),  # noqa: E501
            'tags': ([str],),  # noqa: E501
            'limit_concurrent_requests': (bool,),  # noqa: E501
            'use_akka_http_client': (bool,),  # noqa: E501
            'elastic_writes_configs': ([OtoroshiModelsElasticAnalyticsConfig],),  # noqa: E501
            'log_analytics_on_server': (bool,),  # noqa: E501
            'metadata': ({str: (str,)},),  # noqa: E501
            'api_read_only': (bool,),  # noqa: E501
            'back_office_auth_ref': (dict,),  # noqa: E501
            'stream_entity_only': (bool,),  # noqa: E501
            'otoroshi_id': (str,),  # noqa: E501
            'mailer_settings': (dict,),  # noqa: E501
            'lines': ([str],),  # noqa: E501
            'middle_fingers': (bool,),  # noqa: E501
            'analytics_webhooks': ([OtoroshiModelsWebhook],),  # noqa: E501
            'auto_cert': (OtoroshiModelsAutoCert,),  # noqa: E501
            'maintenance_mode': (bool,),  # noqa: E501
            'lets_encrypt_settings': (OtoroshiUtilsLetsencryptLetsEncryptSettings,),  # noqa: E501
            'snow_monkey_config': (OtoroshiModelsSnowMonkeyConfig,),  # noqa: E501
            'scripts': (OtoroshiModelsGlobalScripts,),  # noqa: E501
            'per_ip_throttling_quota': (int,),  # noqa: E501
            'use_circuit_breakers': (bool,),  # noqa: E501
            'max_http10_response_size': (int,),  # noqa: E501
            'tls_settings': (OtoroshiModelsTlsSettings,),  # noqa: E501
            'statsd_config': (dict,),  # noqa: E501
            'auto_link_to_default_group': (bool,),  # noqa: E501
            'alerts_webhooks': ([OtoroshiModelsWebhook],),  # noqa: E501
            'ip_filtering': (OtoroshiModelsIpFiltering,),  # noqa: E501
            'u2f_login_only': (bool,),  # noqa: E501
            'user_agent_settings': (OtoroshiModelsUserAgentSettings,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'geolocation_settings': 'geolocationSettings',  # noqa: E501
        'alerts_emails': 'alertsEmails',  # noqa: E501
        'throttling_quota': 'throttlingQuota',  # noqa: E501
        'max_webhook_size': 'maxWebhookSize',  # noqa: E501
        'max_concurrent_requests': 'maxConcurrentRequests',  # noqa: E501
        'clever_settings': 'cleverSettings',  # noqa: E501
        'endless_ip_addresses': 'endlessIpAddresses',  # noqa: E501
        'plugins': 'plugins',  # noqa: E501
        'kafka_config': 'kafkaConfig',  # noqa: E501
        'max_logs_size': 'maxLogsSize',  # noqa: E501
        'proxies': 'proxies',  # noqa: E501
        'enable_embedded_metrics': 'enableEmbeddedMetrics',  # noqa: E501
        'elastic_reads_config': 'elasticReadsConfig',  # noqa: E501
        'tags': 'tags',  # noqa: E501
        'limit_concurrent_requests': 'limitConcurrentRequests',  # noqa: E501
        'use_akka_http_client': 'useAkkaHttpClient',  # noqa: E501
        'elastic_writes_configs': 'elasticWritesConfigs',  # noqa: E501
        'log_analytics_on_server': 'logAnalyticsOnServer',  # noqa: E501
        'metadata': 'metadata',  # noqa: E501
        'api_read_only': 'apiReadOnly',  # noqa: E501
        'back_office_auth_ref': 'backOfficeAuthRef',  # noqa: E501
        'stream_entity_only': 'streamEntityOnly',  # noqa: E501
        'otoroshi_id': 'otoroshiId',  # noqa: E501
        'mailer_settings': 'mailerSettings',  # noqa: E501
        'lines': 'lines',  # noqa: E501
        'middle_fingers': 'middleFingers',  # noqa: E501
        'analytics_webhooks': 'analyticsWebhooks',  # noqa: E501
        'auto_cert': 'autoCert',  # noqa: E501
        'maintenance_mode': 'maintenanceMode',  # noqa: E501
        'lets_encrypt_settings': 'letsEncryptSettings',  # noqa: E501
        'snow_monkey_config': 'snowMonkeyConfig',  # noqa: E501
        'scripts': 'scripts',  # noqa: E501
        'per_ip_throttling_quota': 'perIpThrottlingQuota',  # noqa: E501
        'use_circuit_breakers': 'useCircuitBreakers',  # noqa: E501
        'max_http10_response_size': 'maxHttp10ResponseSize',  # noqa: E501
        'tls_settings': 'tlsSettings',  # noqa: E501
        'statsd_config': 'statsdConfig',  # noqa: E501
        'auto_link_to_default_group': 'autoLinkToDefaultGroup',  # noqa: E501
        'alerts_webhooks': 'alertsWebhooks',  # noqa: E501
        'ip_filtering': 'ipFiltering',  # noqa: E501
        'u2f_login_only': 'u2fLoginOnly',  # noqa: E501
        'user_agent_settings': 'userAgentSettings',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """OtoroshiModelsGlobalConfig - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            geolocation_settings (OtoroshiModelsGeolocationSettings): [optional]  # noqa: E501
            alerts_emails ([str]): Email addresses that will receive all Otoroshi alert events. [optional]  # noqa: E501
            throttling_quota (int): Authorized number of calls per second globally, measured on 10 seconds. [optional]  # noqa: E501
            max_webhook_size (int): Max number of items in webhooks. [optional]  # noqa: E501
            max_concurrent_requests (int): The number of authorized request processed at the same time. [optional]  # noqa: E501
            clever_settings (dict): Optional CleverCloud configuration. [optional]  # noqa: E501
            endless_ip_addresses ([str]): IP addresses for which any request to Otoroshi will respond with 128 Gb of zeros. [optional]  # noqa: E501
            plugins (OtoroshiScriptPluginsPlugins): [optional]  # noqa: E501
            kafka_config (dict): Global kafka settings. deprecated. [optional]  # noqa: E501
            max_logs_size (int): Number of events kept locally. [optional]  # noqa: E501
            proxies (OtoroshiModelsProxies): [optional]  # noqa: E501
            enable_embedded_metrics (bool): Enable embedded metrics. [optional]  # noqa: E501
            elastic_reads_config (dict): Config. for elastic reads. [optional]  # noqa: E501
            tags ([str]): Entity tags. [optional]  # noqa: E501
            limit_concurrent_requests (bool): If enabled, Otoroshi will reject new request if too much at the same time. [optional]  # noqa: E501
            use_akka_http_client (bool): Globally use akka http client for everything. [optional]  # noqa: E501
            elastic_writes_configs ([OtoroshiModelsElasticAnalyticsConfig]): Configs. for Elastic writes. [optional]  # noqa: E501
            log_analytics_on_server (bool): Log analytics event on the server. [optional]  # noqa: E501
            metadata ({str: (str,)}): Entity metadata. [optional]  # noqa: E501
            api_read_only (bool): If enabled, Admin API won't be able to write/update/delete entities. [optional]  # noqa: E501
            back_office_auth_ref (dict): Id of the auth module used for otoroshi-ui login. [optional]  # noqa: E501
            stream_entity_only (bool): HTTP will be streamed only. Doesn't work with old browsers. [optional]  # noqa: E501
            otoroshi_id (str): Unique id for this otoroshi instance. [optional]  # noqa: E501
            mailer_settings (dict): Optional mailer configuration. [optional]  # noqa: E501
            lines ([str]): Possibles lines for Otoroshi. [optional]  # noqa: E501
            middle_fingers (bool): Use middle finger emoji as a response character for endless HTTP responses. [optional]  # noqa: E501
            analytics_webhooks ([OtoroshiModelsWebhook]): Webhook that will receive all internal Otoroshi events. [optional]  # noqa: E501
            auto_cert (OtoroshiModelsAutoCert): [optional]  # noqa: E501
            maintenance_mode (bool): Global maintenant mode. [optional]  # noqa: E501
            lets_encrypt_settings (OtoroshiUtilsLetsencryptLetsEncryptSettings): [optional]  # noqa: E501
            snow_monkey_config (OtoroshiModelsSnowMonkeyConfig): [optional]  # noqa: E501
            scripts (OtoroshiModelsGlobalScripts): [optional]  # noqa: E501
            per_ip_throttling_quota (int): Authorized number of calls per second globally per IP address, measured on 10 seconds. [optional]  # noqa: E501
            use_circuit_breakers (bool): If enabled, services will be authorized to use circuit breakers. [optional]  # noqa: E501
            max_http10_response_size (int): The max size in bytes of an HTTP 1.0 response. [optional]  # noqa: E501
            tls_settings (OtoroshiModelsTlsSettings): [optional]  # noqa: E501
            statsd_config (dict): Statsd settings (agent connection). [optional]  # noqa: E501
            auto_link_to_default_group (bool): If not defined, every new service descriptor will be added to the default group. [optional]  # noqa: E501
            alerts_webhooks ([OtoroshiModelsWebhook]): Webhook that will receive all Otoroshi alert events. [optional]  # noqa: E501
            ip_filtering (OtoroshiModelsIpFiltering): [optional]  # noqa: E501
            u2f_login_only (bool): If enabled, login to backoffice through Auth0 will be disabled. [optional]  # noqa: E501
            user_agent_settings (OtoroshiModelsUserAgentSettings): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """OtoroshiModelsGlobalConfig - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            geolocation_settings (OtoroshiModelsGeolocationSettings): [optional]  # noqa: E501
            alerts_emails ([str]): Email addresses that will receive all Otoroshi alert events. [optional]  # noqa: E501
            throttling_quota (int): Authorized number of calls per second globally, measured on 10 seconds. [optional]  # noqa: E501
            max_webhook_size (int): Max number of items in webhooks. [optional]  # noqa: E501
            max_concurrent_requests (int): The number of authorized request processed at the same time. [optional]  # noqa: E501
            clever_settings (dict): Optional CleverCloud configuration. [optional]  # noqa: E501
            endless_ip_addresses ([str]): IP addresses for which any request to Otoroshi will respond with 128 Gb of zeros. [optional]  # noqa: E501
            plugins (OtoroshiScriptPluginsPlugins): [optional]  # noqa: E501
            kafka_config (dict): Global kafka settings. deprecated. [optional]  # noqa: E501
            max_logs_size (int): Number of events kept locally. [optional]  # noqa: E501
            proxies (OtoroshiModelsProxies): [optional]  # noqa: E501
            enable_embedded_metrics (bool): Enable embedded metrics. [optional]  # noqa: E501
            elastic_reads_config (dict): Config. for elastic reads. [optional]  # noqa: E501
            tags ([str]): Entity tags. [optional]  # noqa: E501
            limit_concurrent_requests (bool): If enabled, Otoroshi will reject new request if too much at the same time. [optional]  # noqa: E501
            use_akka_http_client (bool): Globally use akka http client for everything. [optional]  # noqa: E501
            elastic_writes_configs ([OtoroshiModelsElasticAnalyticsConfig]): Configs. for Elastic writes. [optional]  # noqa: E501
            log_analytics_on_server (bool): Log analytics event on the server. [optional]  # noqa: E501
            metadata ({str: (str,)}): Entity metadata. [optional]  # noqa: E501
            api_read_only (bool): If enabled, Admin API won't be able to write/update/delete entities. [optional]  # noqa: E501
            back_office_auth_ref (dict): Id of the auth module used for otoroshi-ui login. [optional]  # noqa: E501
            stream_entity_only (bool): HTTP will be streamed only. Doesn't work with old browsers. [optional]  # noqa: E501
            otoroshi_id (str): Unique id for this otoroshi instance. [optional]  # noqa: E501
            mailer_settings (dict): Optional mailer configuration. [optional]  # noqa: E501
            lines ([str]): Possibles lines for Otoroshi. [optional]  # noqa: E501
            middle_fingers (bool): Use middle finger emoji as a response character for endless HTTP responses. [optional]  # noqa: E501
            analytics_webhooks ([OtoroshiModelsWebhook]): Webhook that will receive all internal Otoroshi events. [optional]  # noqa: E501
            auto_cert (OtoroshiModelsAutoCert): [optional]  # noqa: E501
            maintenance_mode (bool): Global maintenant mode. [optional]  # noqa: E501
            lets_encrypt_settings (OtoroshiUtilsLetsencryptLetsEncryptSettings): [optional]  # noqa: E501
            snow_monkey_config (OtoroshiModelsSnowMonkeyConfig): [optional]  # noqa: E501
            scripts (OtoroshiModelsGlobalScripts): [optional]  # noqa: E501
            per_ip_throttling_quota (int): Authorized number of calls per second globally per IP address, measured on 10 seconds. [optional]  # noqa: E501
            use_circuit_breakers (bool): If enabled, services will be authorized to use circuit breakers. [optional]  # noqa: E501
            max_http10_response_size (int): The max size in bytes of an HTTP 1.0 response. [optional]  # noqa: E501
            tls_settings (OtoroshiModelsTlsSettings): [optional]  # noqa: E501
            statsd_config (dict): Statsd settings (agent connection). [optional]  # noqa: E501
            auto_link_to_default_group (bool): If not defined, every new service descriptor will be added to the default group. [optional]  # noqa: E501
            alerts_webhooks ([OtoroshiModelsWebhook]): Webhook that will receive all Otoroshi alert events. [optional]  # noqa: E501
            ip_filtering (OtoroshiModelsIpFiltering): [optional]  # noqa: E501
            u2f_login_only (bool): If enabled, login to backoffice through Auth0 will be disabled. [optional]  # noqa: E501
            user_agent_settings (OtoroshiModelsUserAgentSettings): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
