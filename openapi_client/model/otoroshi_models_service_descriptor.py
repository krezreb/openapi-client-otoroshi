"""
    Otoroshi Admin API

    Admin API of the Otoroshi reverse proxy  # noqa: E501

    The version of the OpenAPI document: 1.5.0-alpha.14
    Contact: oss@maif.fr
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)
from ..model_utils import OpenApiModel
from openapi_client.exceptions import ApiAttributeError


def lazy_import():
    from openapi_client.model.otoroshi_models_algo_settings import OtoroshiModelsAlgoSettings
    from openapi_client.model.otoroshi_models_api_descriptor import OtoroshiModelsApiDescriptor
    from openapi_client.model.otoroshi_models_api_key_constraints import OtoroshiModelsApiKeyConstraints
    from openapi_client.model.otoroshi_models_canary import OtoroshiModelsCanary
    from openapi_client.model.otoroshi_models_chaos_config import OtoroshiModelsChaosConfig
    from openapi_client.model.otoroshi_models_client_config import OtoroshiModelsClientConfig
    from openapi_client.model.otoroshi_models_cors_settings import OtoroshiModelsCorsSettings
    from openapi_client.model.otoroshi_models_entity_location import OtoroshiModelsEntityLocation
    from openapi_client.model.otoroshi_models_health_check import OtoroshiModelsHealthCheck
    from openapi_client.model.otoroshi_models_ip_filtering import OtoroshiModelsIpFiltering
    from openapi_client.model.otoroshi_models_jwt_verifier import OtoroshiModelsJwtVerifier
    from openapi_client.model.otoroshi_models_load_balancing import OtoroshiModelsLoadBalancing
    from openapi_client.model.otoroshi_models_redirection_settings import OtoroshiModelsRedirectionSettings
    from openapi_client.model.otoroshi_models_restrictions import OtoroshiModelsRestrictions
    from openapi_client.model.otoroshi_models_sec_com_headers import OtoroshiModelsSecComHeaders
    from openapi_client.model.otoroshi_models_sec_com_info_token_version import OtoroshiModelsSecComInfoTokenVersion
    from openapi_client.model.otoroshi_models_sec_com_version import OtoroshiModelsSecComVersion
    from openapi_client.model.otoroshi_models_target import OtoroshiModelsTarget
    from openapi_client.model.otoroshi_script_access_validator_ref import OtoroshiScriptAccessValidatorRef
    from openapi_client.model.otoroshi_script_plugins_plugins import OtoroshiScriptPluginsPlugins
    from openapi_client.model.otoroshi_script_pre_routing_ref import OtoroshiScriptPreRoutingRef
    from openapi_client.model.otoroshi_utils_gzip_gzip_config import OtoroshiUtilsGzipGzipConfig
    globals()['OtoroshiModelsAlgoSettings'] = OtoroshiModelsAlgoSettings
    globals()['OtoroshiModelsApiDescriptor'] = OtoroshiModelsApiDescriptor
    globals()['OtoroshiModelsApiKeyConstraints'] = OtoroshiModelsApiKeyConstraints
    globals()['OtoroshiModelsCanary'] = OtoroshiModelsCanary
    globals()['OtoroshiModelsChaosConfig'] = OtoroshiModelsChaosConfig
    globals()['OtoroshiModelsClientConfig'] = OtoroshiModelsClientConfig
    globals()['OtoroshiModelsCorsSettings'] = OtoroshiModelsCorsSettings
    globals()['OtoroshiModelsEntityLocation'] = OtoroshiModelsEntityLocation
    globals()['OtoroshiModelsHealthCheck'] = OtoroshiModelsHealthCheck
    globals()['OtoroshiModelsIpFiltering'] = OtoroshiModelsIpFiltering
    globals()['OtoroshiModelsJwtVerifier'] = OtoroshiModelsJwtVerifier
    globals()['OtoroshiModelsLoadBalancing'] = OtoroshiModelsLoadBalancing
    globals()['OtoroshiModelsRedirectionSettings'] = OtoroshiModelsRedirectionSettings
    globals()['OtoroshiModelsRestrictions'] = OtoroshiModelsRestrictions
    globals()['OtoroshiModelsSecComHeaders'] = OtoroshiModelsSecComHeaders
    globals()['OtoroshiModelsSecComInfoTokenVersion'] = OtoroshiModelsSecComInfoTokenVersion
    globals()['OtoroshiModelsSecComVersion'] = OtoroshiModelsSecComVersion
    globals()['OtoroshiModelsTarget'] = OtoroshiModelsTarget
    globals()['OtoroshiScriptAccessValidatorRef'] = OtoroshiScriptAccessValidatorRef
    globals()['OtoroshiScriptPluginsPlugins'] = OtoroshiScriptPluginsPlugins
    globals()['OtoroshiScriptPreRoutingRef'] = OtoroshiScriptPreRoutingRef
    globals()['OtoroshiUtilsGzipGzipConfig'] = OtoroshiUtilsGzipGzipConfig


class OtoroshiModelsServiceDescriptor(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'build_mode': (bool,),  # noqa: E501
            'hosts': ([str],),  # noqa: E501
            'private_app': (bool,),  # noqa: E501
            'local_scheme': (str,),  # noqa: E501
            'auth_config_ref': (dict,),  # noqa: E501
            'issue_cert_ca': (dict,),  # noqa: E501
            'root': (str,),  # noqa: E501
            'name': (str,),  # noqa: E501
            'additional_headers': ({str: (str,)},),  # noqa: E501
            'domain': (str,),  # noqa: E501
            'client_config': (OtoroshiModelsClientConfig,),  # noqa: E501
            'matching_root': (dict,),  # noqa: E501
            'force_https': (bool,),  # noqa: E501
            'local_host': (str,),  # noqa: E501
            'send_otoroshi_headers_back': (bool,),  # noqa: E501
            'health_check': (OtoroshiModelsHealthCheck,),  # noqa: E501
            'strictly_private': (bool,),  # noqa: E501
            'detect_api_key_sooner': (bool,),  # noqa: E501
            'allow_http10': (bool,),  # noqa: E501
            'subdomain': (str,),  # noqa: E501
            'paths': ([str],),  # noqa: E501
            'strip_path': (bool,),  # noqa: E501
            'sec_com_algo_challenge_oto_to_back': (OtoroshiModelsAlgoSettings,),  # noqa: E501
            'api_key_constraints': (OtoroshiModelsApiKeyConstraints,),  # noqa: E501
            'env': (str,),  # noqa: E501
            'x_forwarded_headers': (bool,),  # noqa: E501
            'transformer_refs': ([str],),  # noqa: E501
            'enabled': (bool,),  # noqa: E501
            'gzip': (OtoroshiUtilsGzipGzipConfig,),  # noqa: E501
            'send_info_token': (bool,),  # noqa: E501
            'tcp_udp_tunneling': (bool,),  # noqa: E501
            'remove_headers_out': ([str],),  # noqa: E501
            'use_akka_http_client': (bool,),  # noqa: E501
            'maintenance_mode': (bool,),  # noqa: E501
            'id': (str,),  # noqa: E501
            'remove_headers_in': ([str],),  # noqa: E501
            'log_analytics_on_server': (bool,),  # noqa: E501
            'sec_com_algo_info_token': (OtoroshiModelsAlgoSettings,),  # noqa: E501
            'user_facing': (bool,),  # noqa: E501
            'transformer_config': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'client_validator_ref': (dict,),  # noqa: E501
            'security_excluded_patterns': ([str],),  # noqa: E501
            'ip_filtering': (OtoroshiModelsIpFiltering,),  # noqa: E501
            'targets': ([OtoroshiModelsTarget],),  # noqa: E501
            'redirection': (OtoroshiModelsRedirectionSettings,),  # noqa: E501
            'tags': ([str],),  # noqa: E501
            'restrictions': (OtoroshiModelsRestrictions,),  # noqa: E501
            'override_host': (bool,),  # noqa: E501
            'access_validator': (OtoroshiScriptAccessValidatorRef,),  # noqa: E501
            'send_state_challenge': (bool,),  # noqa: E501
            'chaos_config': (OtoroshiModelsChaosConfig,),  # noqa: E501
            'sec_com_info_token_version': (OtoroshiModelsSecComInfoTokenVersion,),  # noqa: E501
            'additional_headers_out': ({str: (str,)},),  # noqa: E501
            'sec_com_headers': (OtoroshiModelsSecComHeaders,),  # noqa: E501
            'matching_headers': ({str: (str,)},),  # noqa: E501
            'sec_com_algo_challenge_back_to_oto': (OtoroshiModelsAlgoSettings,),  # noqa: E501
            'sec_com_use_same_algo': (bool,),  # noqa: E501
            'use_new_ws_client': (bool,),  # noqa: E501
            'sec_com_excluded_patterns': ([str],),  # noqa: E501
            'redirect_to_local': (bool,),  # noqa: E501
            'enforce_secure_communication': (bool,),  # noqa: E501
            'missing_only_headers_out': ({str: (str,)},),  # noqa: E501
            'sec_com_settings': (OtoroshiModelsAlgoSettings,),  # noqa: E501
            'handle_legacy_domain': (bool,),  # noqa: E501
            'canary': (OtoroshiModelsCanary,),  # noqa: E501
            'location': (OtoroshiModelsEntityLocation,),  # noqa: E501
            'plugins': (OtoroshiScriptPluginsPlugins,),  # noqa: E501
            'sec_com_ttl': (float,),  # noqa: E501
            'description': (str,),  # noqa: E501
            'sec_com_version': (OtoroshiModelsSecComVersion,),  # noqa: E501
            'pre_routing': (OtoroshiScriptPreRoutingRef,),  # noqa: E501
            'groups': ([str],),  # noqa: E501
            'read_only': (bool,),  # noqa: E501
            'private_patterns': ([str],),  # noqa: E501
            'targets_load_balancing': (OtoroshiModelsLoadBalancing,),  # noqa: E501
            'cors': (OtoroshiModelsCorsSettings,),  # noqa: E501
            'metadata': ({str: (str,)},),  # noqa: E501
            'public_patterns': ([str],),  # noqa: E501
            'api': (OtoroshiModelsApiDescriptor,),  # noqa: E501
            'missing_only_headers_in': ({str: (str,)},),  # noqa: E501
            'issue_cert': (bool,),  # noqa: E501
            'headers_verification': ({str: (str,)},),  # noqa: E501
            'jwt_verifier': (OtoroshiModelsJwtVerifier,),  # noqa: E501
            'lets_encrypt': (bool,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'build_mode': 'buildMode',  # noqa: E501
        'hosts': 'hosts',  # noqa: E501
        'private_app': 'privateApp',  # noqa: E501
        'local_scheme': 'localScheme',  # noqa: E501
        'auth_config_ref': 'authConfigRef',  # noqa: E501
        'issue_cert_ca': 'issueCertCA',  # noqa: E501
        'root': 'root',  # noqa: E501
        'name': 'name',  # noqa: E501
        'additional_headers': 'additionalHeaders',  # noqa: E501
        'domain': 'domain',  # noqa: E501
        'client_config': 'clientConfig',  # noqa: E501
        'matching_root': 'matchingRoot',  # noqa: E501
        'force_https': 'forceHttps',  # noqa: E501
        'local_host': 'localHost',  # noqa: E501
        'send_otoroshi_headers_back': 'sendOtoroshiHeadersBack',  # noqa: E501
        'health_check': 'healthCheck',  # noqa: E501
        'strictly_private': 'strictlyPrivate',  # noqa: E501
        'detect_api_key_sooner': 'detectApiKeySooner',  # noqa: E501
        'allow_http10': 'allowHttp10',  # noqa: E501
        'subdomain': 'subdomain',  # noqa: E501
        'paths': 'paths',  # noqa: E501
        'strip_path': 'stripPath',  # noqa: E501
        'sec_com_algo_challenge_oto_to_back': 'secComAlgoChallengeOtoToBack',  # noqa: E501
        'api_key_constraints': 'apiKeyConstraints',  # noqa: E501
        'env': 'env',  # noqa: E501
        'x_forwarded_headers': 'xForwardedHeaders',  # noqa: E501
        'transformer_refs': 'transformerRefs',  # noqa: E501
        'enabled': 'enabled',  # noqa: E501
        'gzip': 'gzip',  # noqa: E501
        'send_info_token': 'sendInfoToken',  # noqa: E501
        'tcp_udp_tunneling': 'tcpUdpTunneling',  # noqa: E501
        'remove_headers_out': 'removeHeadersOut',  # noqa: E501
        'use_akka_http_client': 'useAkkaHttpClient',  # noqa: E501
        'maintenance_mode': 'maintenanceMode',  # noqa: E501
        'id': 'id',  # noqa: E501
        'remove_headers_in': 'removeHeadersIn',  # noqa: E501
        'log_analytics_on_server': 'logAnalyticsOnServer',  # noqa: E501
        'sec_com_algo_info_token': 'secComAlgoInfoToken',  # noqa: E501
        'user_facing': 'userFacing',  # noqa: E501
        'transformer_config': 'transformerConfig',  # noqa: E501
        'client_validator_ref': 'clientValidatorRef',  # noqa: E501
        'security_excluded_patterns': 'securityExcludedPatterns',  # noqa: E501
        'ip_filtering': 'ipFiltering',  # noqa: E501
        'targets': 'targets',  # noqa: E501
        'redirection': 'redirection',  # noqa: E501
        'tags': 'tags',  # noqa: E501
        'restrictions': 'restrictions',  # noqa: E501
        'override_host': 'overrideHost',  # noqa: E501
        'access_validator': 'accessValidator',  # noqa: E501
        'send_state_challenge': 'sendStateChallenge',  # noqa: E501
        'chaos_config': 'chaosConfig',  # noqa: E501
        'sec_com_info_token_version': 'secComInfoTokenVersion',  # noqa: E501
        'additional_headers_out': 'additionalHeadersOut',  # noqa: E501
        'sec_com_headers': 'secComHeaders',  # noqa: E501
        'matching_headers': 'matchingHeaders',  # noqa: E501
        'sec_com_algo_challenge_back_to_oto': 'secComAlgoChallengeBackToOto',  # noqa: E501
        'sec_com_use_same_algo': 'secComUseSameAlgo',  # noqa: E501
        'use_new_ws_client': 'useNewWSClient',  # noqa: E501
        'sec_com_excluded_patterns': 'secComExcludedPatterns',  # noqa: E501
        'redirect_to_local': 'redirectToLocal',  # noqa: E501
        'enforce_secure_communication': 'enforceSecureCommunication',  # noqa: E501
        'missing_only_headers_out': 'missingOnlyHeadersOut',  # noqa: E501
        'sec_com_settings': 'secComSettings',  # noqa: E501
        'handle_legacy_domain': 'handleLegacyDomain',  # noqa: E501
        'canary': 'canary',  # noqa: E501
        'location': 'location',  # noqa: E501
        'plugins': 'plugins',  # noqa: E501
        'sec_com_ttl': 'secComTtl',  # noqa: E501
        'description': 'description',  # noqa: E501
        'sec_com_version': 'secComVersion',  # noqa: E501
        'pre_routing': 'preRouting',  # noqa: E501
        'groups': 'groups',  # noqa: E501
        'read_only': 'readOnly',  # noqa: E501
        'private_patterns': 'privatePatterns',  # noqa: E501
        'targets_load_balancing': 'targetsLoadBalancing',  # noqa: E501
        'cors': 'cors',  # noqa: E501
        'metadata': 'metadata',  # noqa: E501
        'public_patterns': 'publicPatterns',  # noqa: E501
        'api': 'api',  # noqa: E501
        'missing_only_headers_in': 'missingOnlyHeadersIn',  # noqa: E501
        'issue_cert': 'issueCert',  # noqa: E501
        'headers_verification': 'headersVerification',  # noqa: E501
        'jwt_verifier': 'jwtVerifier',  # noqa: E501
        'lets_encrypt': 'letsEncrypt',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """OtoroshiModelsServiceDescriptor - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            build_mode (bool): Display a construction page when a user try to use the service. [optional]  # noqa: E501
            hosts ([str]): Possible hosts for the service. [optional]  # noqa: E501
            private_app (bool): When enabled, user will be allowed to use the service (UI) only if they are registered users of the private apps domain. [optional]  # noqa: E501
            local_scheme (str): The scheme used localy, mainly http. [optional]  # noqa: E501
            auth_config_ref (dict): A reference to a global auth module config. [optional]  # noqa: E501
            issue_cert_ca (dict): CA for cert issuance. [optional]  # noqa: E501
            root (str): Otoroshi will append this root to any target choosen. If the specified root is '/api/foo', then a request to https://yyyyyyy/bar will actually hit https://xxxxxxxxx/api/foo/bar. [optional]  # noqa: E501
            name (str): The name of your service. Only for debug and human readability purposes. [optional]  # noqa: E501
            additional_headers ({str: (str,)}): Specify headers that will be added to each client request. Useful to add authentication. [optional]  # noqa: E501
            domain (str): The domain on which the service is available.. [optional]  # noqa: E501
            client_config (OtoroshiModelsClientConfig): [optional]  # noqa: E501
            matching_root (dict): The root path on which the service is available. [optional]  # noqa: E501
            force_https (bool): Will force redirection to https:// if not present. [optional]  # noqa: E501
            local_host (str): The host used localy, mainly localhost:xxxx. [optional]  # noqa: E501
            send_otoroshi_headers_back (bool): When enabled, Otoroshi will send headers to consumer like request id, client latency, overhead, etc .... [optional]  # noqa: E501
            health_check (OtoroshiModelsHealthCheck): [optional]  # noqa: E501
            strictly_private (bool): When strictly private, private app session will not pass apikey filters. [optional]  # noqa: E501
            detect_api_key_sooner (bool): Detect if an apikey is present but do not fail if not. [optional]  # noqa: E501
            allow_http10 (bool): Allow HTTP/1.0 requests. [optional]  # noqa: E501
            subdomain (str): The subdomain on which the service is available. [optional]  # noqa: E501
            paths ([str]): Matching paths on request. [optional]  # noqa: E501
            strip_path (bool): Strip matching path in the forwarded request path. [optional]  # noqa: E501
            sec_com_algo_challenge_oto_to_back (OtoroshiModelsAlgoSettings): [optional]  # noqa: E501
            api_key_constraints (OtoroshiModelsApiKeyConstraints): [optional]  # noqa: E501
            env (str): The line on which the service is available. Based on that value, the name of the line will be appended to the subdomain. For line prod, nothing will be appended. For example, if the subdomain is 'foo' and line is 'preprod', then the exposed service will be available at 'foo.preprod.mydomain'. [optional]  # noqa: E501
            x_forwarded_headers (bool): Send X-Forwarded-* headers. [optional]  # noqa: E501
            transformer_refs ([str]): Enabled transformer plugins. [optional]  # noqa: E501
            enabled (bool): Activate or deactivate your service. Once disabled, users will get an error page saying the service does not exist. [optional]  # noqa: E501
            gzip (OtoroshiUtilsGzipGzipConfig): [optional]  # noqa: E501
            send_info_token (bool): Should otoroshi send info token. [optional]  # noqa: E501
            tcp_udp_tunneling (bool): Enabled TCP/UDP tunneling through websocket connection. [optional]  # noqa: E501
            remove_headers_out ([str]): Remove headers on client response. [optional]  # noqa: E501
            use_akka_http_client (bool): Use akka http client for this service. [optional]  # noqa: E501
            maintenance_mode (bool): Display a maintainance page when a user try to use the service. [optional]  # noqa: E501
            id (str): A unique random string to identify your service. [optional]  # noqa: E501
            remove_headers_in ([str]): Remove headers on client request. [optional]  # noqa: E501
            log_analytics_on_server (bool): Log analytics event on the server. [optional]  # noqa: E501
            sec_com_algo_info_token (OtoroshiModelsAlgoSettings): [optional]  # noqa: E501
            user_facing (bool): The fact that this service will be seen by users and cannot be impacted by the Snow Monkey. [optional]  # noqa: E501
            transformer_config ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): Transformer plugins configuration. [optional]  # noqa: E501
            client_validator_ref (dict): A reference to validation authority. [optional]  # noqa: E501
            security_excluded_patterns ([str]): Exclude some paths. [optional]  # noqa: E501
            ip_filtering (OtoroshiModelsIpFiltering): [optional]  # noqa: E501
            targets ([OtoroshiModelsTarget]): The list of target that Otoroshi will proxy and expose through the subdomain defined before. Otoroshi will do round-robin load balancing between all those targets with circuit breaker mecanism to avoid cascading failures. [optional]  # noqa: E501
            redirection (OtoroshiModelsRedirectionSettings): [optional]  # noqa: E501
            tags ([str]): Entity tags. [optional]  # noqa: E501
            restrictions (OtoroshiModelsRestrictions): [optional]  # noqa: E501
            override_host (bool): Host header will be overriden with Host of the target. [optional]  # noqa: E501
            access_validator (OtoroshiScriptAccessValidatorRef): [optional]  # noqa: E501
            send_state_challenge (bool): Should otoroshi send challenge token. [optional]  # noqa: E501
            chaos_config (OtoroshiModelsChaosConfig): [optional]  # noqa: E501
            sec_com_info_token_version (OtoroshiModelsSecComInfoTokenVersion): [optional]  # noqa: E501
            additional_headers_out ({str: (str,)}): Specify headers that will be added to each client response. [optional]  # noqa: E501
            sec_com_headers (OtoroshiModelsSecComHeaders): [optional]  # noqa: E501
            matching_headers ({str: (str,)}): Specify headers that MUST be present on client request to route it. Useful to implement versioning. [optional]  # noqa: E501
            sec_com_algo_challenge_back_to_oto (OtoroshiModelsAlgoSettings): [optional]  # noqa: E501
            sec_com_use_same_algo (bool): Use the same algo for info token, challenge token signing, challenge token verification. [optional]  # noqa: E501
            use_new_ws_client (bool): Use akka http client for this service on websocket calls. [optional]  # noqa: E501
            sec_com_excluded_patterns ([str]): URI patterns excluded from secured communications. [optional]  # noqa: E501
            redirect_to_local (bool): If you work locally with Otoroshi, you may want to use that feature to redirect one particuliar service to a local host. For example, you can relocate https://foo.preprod.bar.com to http://localhost:8080 to make some tests. [optional]  # noqa: E501
            enforce_secure_communication (bool): When enabled, Otoroshi will try to exchange headers with downstream service to ensure no one else can use the service from outside. [optional]  # noqa: E501
            missing_only_headers_out ({str: (str,)}): Add header on client response if they are not present. [optional]  # noqa: E501
            sec_com_settings (OtoroshiModelsAlgoSettings): [optional]  # noqa: E501
            handle_legacy_domain (bool): Use 'domain', 'subdomain', 'env' and 'matchingRoot' for routing in addition to hosts, or just use hosts.. [optional]  # noqa: E501
            canary (OtoroshiModelsCanary): [optional]  # noqa: E501
            location (OtoroshiModelsEntityLocation): [optional]  # noqa: E501
            plugins (OtoroshiScriptPluginsPlugins): [optional]  # noqa: E501
            sec_com_ttl (float): TTL for the info token. [optional]  # noqa: E501
            description (str): Entity description. [optional]  # noqa: E501
            sec_com_version (OtoroshiModelsSecComVersion): [optional]  # noqa: E501
            pre_routing (OtoroshiScriptPreRoutingRef): [optional]  # noqa: E501
            groups ([str]): Each service descriptor is attached to groups. A group can have one or more services. Each API key is linked to a group and allow access to every service in the group. [optional]  # noqa: E501
            read_only (bool): Service only accepts GET, HEAD and OPTIONS requests. [optional]  # noqa: E501
            private_patterns ([str]): If you define a public pattern that is a little bit too much, you can make some of public URL private again. [optional]  # noqa: E501
            targets_load_balancing (OtoroshiModelsLoadBalancing): [optional]  # noqa: E501
            cors (OtoroshiModelsCorsSettings): [optional]  # noqa: E501
            metadata ({str: (str,)}): Just a bunch of random properties. [optional]  # noqa: E501
            public_patterns ([str]): By default, every services are private only and you'll need an API key to access it. However, if you want to expose a public UI, you can define one or more public patterns (regex) to allow access to anybody. For example if you want to allow anybody on any URL, just use '/.*'. [optional]  # noqa: E501
            api (OtoroshiModelsApiDescriptor): [optional]  # noqa: E501
            missing_only_headers_in ({str: (str,)}): Add header on client request if they are not present. [optional]  # noqa: E501
            issue_cert (bool): Flag to automatically issue a cert for this service. [optional]  # noqa: E501
            headers_verification ({str: (str,)}): Specify headers that will be verified after routing.. [optional]  # noqa: E501
            jwt_verifier (OtoroshiModelsJwtVerifier): [optional]  # noqa: E501
            lets_encrypt (bool): Flag to automatically issue a let's encrypt (ACME) cert for this service. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """OtoroshiModelsServiceDescriptor - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            build_mode (bool): Display a construction page when a user try to use the service. [optional]  # noqa: E501
            hosts ([str]): Possible hosts for the service. [optional]  # noqa: E501
            private_app (bool): When enabled, user will be allowed to use the service (UI) only if they are registered users of the private apps domain. [optional]  # noqa: E501
            local_scheme (str): The scheme used localy, mainly http. [optional]  # noqa: E501
            auth_config_ref (dict): A reference to a global auth module config. [optional]  # noqa: E501
            issue_cert_ca (dict): CA for cert issuance. [optional]  # noqa: E501
            root (str): Otoroshi will append this root to any target choosen. If the specified root is '/api/foo', then a request to https://yyyyyyy/bar will actually hit https://xxxxxxxxx/api/foo/bar. [optional]  # noqa: E501
            name (str): The name of your service. Only for debug and human readability purposes. [optional]  # noqa: E501
            additional_headers ({str: (str,)}): Specify headers that will be added to each client request. Useful to add authentication. [optional]  # noqa: E501
            domain (str): The domain on which the service is available.. [optional]  # noqa: E501
            client_config (OtoroshiModelsClientConfig): [optional]  # noqa: E501
            matching_root (dict): The root path on which the service is available. [optional]  # noqa: E501
            force_https (bool): Will force redirection to https:// if not present. [optional]  # noqa: E501
            local_host (str): The host used localy, mainly localhost:xxxx. [optional]  # noqa: E501
            send_otoroshi_headers_back (bool): When enabled, Otoroshi will send headers to consumer like request id, client latency, overhead, etc .... [optional]  # noqa: E501
            health_check (OtoroshiModelsHealthCheck): [optional]  # noqa: E501
            strictly_private (bool): When strictly private, private app session will not pass apikey filters. [optional]  # noqa: E501
            detect_api_key_sooner (bool): Detect if an apikey is present but do not fail if not. [optional]  # noqa: E501
            allow_http10 (bool): Allow HTTP/1.0 requests. [optional]  # noqa: E501
            subdomain (str): The subdomain on which the service is available. [optional]  # noqa: E501
            paths ([str]): Matching paths on request. [optional]  # noqa: E501
            strip_path (bool): Strip matching path in the forwarded request path. [optional]  # noqa: E501
            sec_com_algo_challenge_oto_to_back (OtoroshiModelsAlgoSettings): [optional]  # noqa: E501
            api_key_constraints (OtoroshiModelsApiKeyConstraints): [optional]  # noqa: E501
            env (str): The line on which the service is available. Based on that value, the name of the line will be appended to the subdomain. For line prod, nothing will be appended. For example, if the subdomain is 'foo' and line is 'preprod', then the exposed service will be available at 'foo.preprod.mydomain'. [optional]  # noqa: E501
            x_forwarded_headers (bool): Send X-Forwarded-* headers. [optional]  # noqa: E501
            transformer_refs ([str]): Enabled transformer plugins. [optional]  # noqa: E501
            enabled (bool): Activate or deactivate your service. Once disabled, users will get an error page saying the service does not exist. [optional]  # noqa: E501
            gzip (OtoroshiUtilsGzipGzipConfig): [optional]  # noqa: E501
            send_info_token (bool): Should otoroshi send info token. [optional]  # noqa: E501
            tcp_udp_tunneling (bool): Enabled TCP/UDP tunneling through websocket connection. [optional]  # noqa: E501
            remove_headers_out ([str]): Remove headers on client response. [optional]  # noqa: E501
            use_akka_http_client (bool): Use akka http client for this service. [optional]  # noqa: E501
            maintenance_mode (bool): Display a maintainance page when a user try to use the service. [optional]  # noqa: E501
            id (str): A unique random string to identify your service. [optional]  # noqa: E501
            remove_headers_in ([str]): Remove headers on client request. [optional]  # noqa: E501
            log_analytics_on_server (bool): Log analytics event on the server. [optional]  # noqa: E501
            sec_com_algo_info_token (OtoroshiModelsAlgoSettings): [optional]  # noqa: E501
            user_facing (bool): The fact that this service will be seen by users and cannot be impacted by the Snow Monkey. [optional]  # noqa: E501
            transformer_config ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): Transformer plugins configuration. [optional]  # noqa: E501
            client_validator_ref (dict): A reference to validation authority. [optional]  # noqa: E501
            security_excluded_patterns ([str]): Exclude some paths. [optional]  # noqa: E501
            ip_filtering (OtoroshiModelsIpFiltering): [optional]  # noqa: E501
            targets ([OtoroshiModelsTarget]): The list of target that Otoroshi will proxy and expose through the subdomain defined before. Otoroshi will do round-robin load balancing between all those targets with circuit breaker mecanism to avoid cascading failures. [optional]  # noqa: E501
            redirection (OtoroshiModelsRedirectionSettings): [optional]  # noqa: E501
            tags ([str]): Entity tags. [optional]  # noqa: E501
            restrictions (OtoroshiModelsRestrictions): [optional]  # noqa: E501
            override_host (bool): Host header will be overriden with Host of the target. [optional]  # noqa: E501
            access_validator (OtoroshiScriptAccessValidatorRef): [optional]  # noqa: E501
            send_state_challenge (bool): Should otoroshi send challenge token. [optional]  # noqa: E501
            chaos_config (OtoroshiModelsChaosConfig): [optional]  # noqa: E501
            sec_com_info_token_version (OtoroshiModelsSecComInfoTokenVersion): [optional]  # noqa: E501
            additional_headers_out ({str: (str,)}): Specify headers that will be added to each client response. [optional]  # noqa: E501
            sec_com_headers (OtoroshiModelsSecComHeaders): [optional]  # noqa: E501
            matching_headers ({str: (str,)}): Specify headers that MUST be present on client request to route it. Useful to implement versioning. [optional]  # noqa: E501
            sec_com_algo_challenge_back_to_oto (OtoroshiModelsAlgoSettings): [optional]  # noqa: E501
            sec_com_use_same_algo (bool): Use the same algo for info token, challenge token signing, challenge token verification. [optional]  # noqa: E501
            use_new_ws_client (bool): Use akka http client for this service on websocket calls. [optional]  # noqa: E501
            sec_com_excluded_patterns ([str]): URI patterns excluded from secured communications. [optional]  # noqa: E501
            redirect_to_local (bool): If you work locally with Otoroshi, you may want to use that feature to redirect one particuliar service to a local host. For example, you can relocate https://foo.preprod.bar.com to http://localhost:8080 to make some tests. [optional]  # noqa: E501
            enforce_secure_communication (bool): When enabled, Otoroshi will try to exchange headers with downstream service to ensure no one else can use the service from outside. [optional]  # noqa: E501
            missing_only_headers_out ({str: (str,)}): Add header on client response if they are not present. [optional]  # noqa: E501
            sec_com_settings (OtoroshiModelsAlgoSettings): [optional]  # noqa: E501
            handle_legacy_domain (bool): Use 'domain', 'subdomain', 'env' and 'matchingRoot' for routing in addition to hosts, or just use hosts.. [optional]  # noqa: E501
            canary (OtoroshiModelsCanary): [optional]  # noqa: E501
            location (OtoroshiModelsEntityLocation): [optional]  # noqa: E501
            plugins (OtoroshiScriptPluginsPlugins): [optional]  # noqa: E501
            sec_com_ttl (float): TTL for the info token. [optional]  # noqa: E501
            description (str): Entity description. [optional]  # noqa: E501
            sec_com_version (OtoroshiModelsSecComVersion): [optional]  # noqa: E501
            pre_routing (OtoroshiScriptPreRoutingRef): [optional]  # noqa: E501
            groups ([str]): Each service descriptor is attached to groups. A group can have one or more services. Each API key is linked to a group and allow access to every service in the group. [optional]  # noqa: E501
            read_only (bool): Service only accepts GET, HEAD and OPTIONS requests. [optional]  # noqa: E501
            private_patterns ([str]): If you define a public pattern that is a little bit too much, you can make some of public URL private again. [optional]  # noqa: E501
            targets_load_balancing (OtoroshiModelsLoadBalancing): [optional]  # noqa: E501
            cors (OtoroshiModelsCorsSettings): [optional]  # noqa: E501
            metadata ({str: (str,)}): Just a bunch of random properties. [optional]  # noqa: E501
            public_patterns ([str]): By default, every services are private only and you'll need an API key to access it. However, if you want to expose a public UI, you can define one or more public patterns (regex) to allow access to anybody. For example if you want to allow anybody on any URL, just use '/.*'. [optional]  # noqa: E501
            api (OtoroshiModelsApiDescriptor): [optional]  # noqa: E501
            missing_only_headers_in ({str: (str,)}): Add header on client request if they are not present. [optional]  # noqa: E501
            issue_cert (bool): Flag to automatically issue a cert for this service. [optional]  # noqa: E501
            headers_verification ({str: (str,)}): Specify headers that will be verified after routing.. [optional]  # noqa: E501
            jwt_verifier (OtoroshiModelsJwtVerifier): [optional]  # noqa: E501
            lets_encrypt (bool): Flag to automatically issue a let's encrypt (ACME) cert for this service. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
