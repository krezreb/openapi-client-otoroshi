"""
    Otoroshi Admin API

    Admin API of the Otoroshi reverse proxy  # noqa: E501

    The version of the OpenAPI document: 1.5.0-alpha.14
    Contact: oss@maif.fr
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)
from ..model_utils import OpenApiModel
from openapi_client.exceptions import ApiAttributeError


def lazy_import():
    from openapi_client.model.otoroshi_auth_basic_auth_module_config import OtoroshiAuthBasicAuthModuleConfig
    from openapi_client.model.otoroshi_auth_basic_auth_user import OtoroshiAuthBasicAuthUser
    from openapi_client.model.otoroshi_auth_generic_oauth2_module_config import OtoroshiAuthGenericOauth2ModuleConfig
    from openapi_client.model.otoroshi_auth_group_filter import OtoroshiAuthGroupFilter
    from openapi_client.model.otoroshi_auth_group_rights import OtoroshiAuthGroupRights
    from openapi_client.model.otoroshi_auth_ldap_auth_module_config import OtoroshiAuthLdapAuthModuleConfig
    from openapi_client.model.otoroshi_auth_oauth1_module_config import OtoroshiAuthOauth1ModuleConfig
    from openapi_client.model.otoroshi_auth_saml_auth_module_config import OtoroshiAuthSamlAuthModuleConfig
    from openapi_client.model.otoroshi_auth_saml_credentials import OtoroshiAuthSAMLCredentials
    from openapi_client.model.otoroshi_auth_saml_signature import OtoroshiAuthSAMLSignature
    from openapi_client.model.otoroshi_auth_session_cookie_values import OtoroshiAuthSessionCookieValues
    from openapi_client.model.otoroshi_models_entity_location import OtoroshiModelsEntityLocation
    from openapi_client.model.otoroshi_models_user_rights import OtoroshiModelsUserRights
    from openapi_client.model.otoroshi_utils_http_mtls_config import OtoroshiUtilsHttpMtlsConfig
    globals()['OtoroshiAuthBasicAuthModuleConfig'] = OtoroshiAuthBasicAuthModuleConfig
    globals()['OtoroshiAuthBasicAuthUser'] = OtoroshiAuthBasicAuthUser
    globals()['OtoroshiAuthGenericOauth2ModuleConfig'] = OtoroshiAuthGenericOauth2ModuleConfig
    globals()['OtoroshiAuthGroupFilter'] = OtoroshiAuthGroupFilter
    globals()['OtoroshiAuthGroupRights'] = OtoroshiAuthGroupRights
    globals()['OtoroshiAuthLdapAuthModuleConfig'] = OtoroshiAuthLdapAuthModuleConfig
    globals()['OtoroshiAuthOauth1ModuleConfig'] = OtoroshiAuthOauth1ModuleConfig
    globals()['OtoroshiAuthSAMLCredentials'] = OtoroshiAuthSAMLCredentials
    globals()['OtoroshiAuthSAMLSignature'] = OtoroshiAuthSAMLSignature
    globals()['OtoroshiAuthSamlAuthModuleConfig'] = OtoroshiAuthSamlAuthModuleConfig
    globals()['OtoroshiAuthSessionCookieValues'] = OtoroshiAuthSessionCookieValues
    globals()['OtoroshiModelsEntityLocation'] = OtoroshiModelsEntityLocation
    globals()['OtoroshiModelsUserRights'] = OtoroshiModelsUserRights
    globals()['OtoroshiUtilsHttpMtlsConfig'] = OtoroshiUtilsHttpMtlsConfig


class OtoroshiAuthAuthModuleConfig(ModelComposed):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('type',): {
            'SAML': "saml",
            'OAUTH1': "oauth1",
            'OAUTH2': "oauth2",
            'LDAP': "ldap",
            'BASIC': "basic",
        },
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'session_max_age': (int,),  # noqa: E501
            'metadata': ({str: (str,)},),  # noqa: E501
            'session_cookie_values': (OtoroshiAuthSessionCookieValues,),  # noqa: E501
            'basic_auth': (bool,),  # noqa: E501
            'name': (str,),  # noqa: E501
            'webauthn': (bool,),  # noqa: E501
            'location': (OtoroshiModelsEntityLocation,),  # noqa: E501
            'id': (str,),  # noqa: E501
            'type': (str,),  # noqa: E501
            'users': ([OtoroshiAuthBasicAuthUser],),  # noqa: E501
            'desc': (str,),  # noqa: E501
            'tags': ([str],),  # noqa: E501
            'refresh_tokens': (bool,),  # noqa: E501
            'token_url': (str,),  # noqa: E501
            'mtls_config': (OtoroshiUtilsHttpMtlsConfig,),  # noqa: E501
            'name_field': (str,),  # noqa: E501
            'email_field': (str,),  # noqa: E501
            'introspection_url': (str,),  # noqa: E501
            'login_url': (str,),  # noqa: E501
            'scope': (str,),  # noqa: E501
            'rights_override': ({str: (OtoroshiModelsUserRights,)},),  # noqa: E501
            'callback_url': (str,),  # noqa: E501
            'client_secret': (str,),  # noqa: E501
            'extra_metadata': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'access_token_field': (str,),  # noqa: E501
            'user_info_url': (str,),  # noqa: E501
            'client_id': (str,),  # noqa: E501
            'use_cookie': (bool,),  # noqa: E501
            'authorize_url': (str,),  # noqa: E501
            'data_override': ({str: ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},)},),  # noqa: E501
            'super_admins': (bool,),  # noqa: E501
            'api_key_meta_field': (str,),  # noqa: E501
            'use_json': (bool,),  # noqa: E501
            'api_key_tags_field': (str,),  # noqa: E501
            'otoroshi_data_field': (str,),  # noqa: E501
            'jwt_verifier': (dict,),  # noqa: E501
            'proxy': (dict,),  # noqa: E501
            'logout_url': (str,),  # noqa: E501
            'oid_config': (dict,),  # noqa: E501
            'read_profile_from_token': (bool,),  # noqa: E501
            'claims': (str,),  # noqa: E501
            'group_filters': ([OtoroshiAuthGroupFilter],),  # noqa: E501
            'allow_empty_password': (bool,),  # noqa: E501
            'search_base': (str,),  # noqa: E501
            'metadata_field': (dict,),  # noqa: E501
            'group_rights': ({str: (OtoroshiAuthGroupRights,)},),  # noqa: E501
            'search_filter': (str,),  # noqa: E501
            'admin_password': (dict,),  # noqa: E501
            'user_base': (dict,),  # noqa: E501
            'server_urls': ([str],),  # noqa: E501
            'admin_username': (dict,),  # noqa: E501
            'profile_url': (str,),  # noqa: E501
            'authorize_url': (str,),  # noqa: E501
            'request_token_url': (str,),  # noqa: E501
            'http_method': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'consumer_secret': (str,),  # noqa: E501
            'access_token_url': (str,),  # noqa: E501
            'callback_url': (str,),  # noqa: E501
            'consumer_key': (str,),  # noqa: E501
            'validate_signature': (bool,),  # noqa: E501
            'sso_protocol_binding': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'validating_certificates': ([str],),  # noqa: E501
            'signature': (OtoroshiAuthSAMLSignature,),  # noqa: E501
            'credentials': (OtoroshiAuthSAMLCredentials,),  # noqa: E501
            'validate_assertions': (bool,),  # noqa: E501
            'issuer': (str,),  # noqa: E501
            'used_name_idas_email': (bool,),  # noqa: E501
            'single_logout_url': (str,),  # noqa: E501
            'email_attribute_name': (dict,),  # noqa: E501
            'single_sign_on_url': (str,),  # noqa: E501
            'name_id_format': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'single_logout_protocol_binding': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'session_max_age': 'sessionMaxAge',  # noqa: E501
        'metadata': 'metadata',  # noqa: E501
        'session_cookie_values': 'sessionCookieValues',  # noqa: E501
        'basic_auth': 'basicAuth',  # noqa: E501
        'name': 'name',  # noqa: E501
        'webauthn': 'webauthn',  # noqa: E501
        'location': 'location',  # noqa: E501
        'id': 'id',  # noqa: E501
        'type': 'type',  # noqa: E501
        'users': 'users',  # noqa: E501
        'desc': 'desc',  # noqa: E501
        'tags': 'tags',  # noqa: E501
        'refresh_tokens': 'refreshTokens',  # noqa: E501
        'token_url': 'tokenUrl',  # noqa: E501
        'mtls_config': 'mtlsConfig',  # noqa: E501
        'name_field': 'nameField',  # noqa: E501
        'email_field': 'emailField',  # noqa: E501
        'introspection_url': 'introspectionUrl',  # noqa: E501
        'login_url': 'loginUrl',  # noqa: E501
        'scope': 'scope',  # noqa: E501
        'rights_override': 'rightsOverride',  # noqa: E501
        'callback_url': 'callbackUrl',  # noqa: E501
        'client_secret': 'clientSecret',  # noqa: E501
        'extra_metadata': 'extraMetadata',  # noqa: E501
        'access_token_field': 'accessTokenField',  # noqa: E501
        'user_info_url': 'userInfoUrl',  # noqa: E501
        'client_id': 'clientId',  # noqa: E501
        'use_cookie': 'useCookie',  # noqa: E501
        'authorize_url': 'authorizeUrl',  # noqa: E501
        'data_override': 'dataOverride',  # noqa: E501
        'super_admins': 'superAdmins',  # noqa: E501
        'api_key_meta_field': 'apiKeyMetaField',  # noqa: E501
        'use_json': 'useJson',  # noqa: E501
        'api_key_tags_field': 'apiKeyTagsField',  # noqa: E501
        'otoroshi_data_field': 'otoroshiDataField',  # noqa: E501
        'jwt_verifier': 'jwtVerifier',  # noqa: E501
        'proxy': 'proxy',  # noqa: E501
        'logout_url': 'logoutUrl',  # noqa: E501
        'oid_config': 'oidConfig',  # noqa: E501
        'read_profile_from_token': 'readProfileFromToken',  # noqa: E501
        'claims': 'claims',  # noqa: E501
        'group_filters': 'groupFilters',  # noqa: E501
        'allow_empty_password': 'allowEmptyPassword',  # noqa: E501
        'search_base': 'searchBase',  # noqa: E501
        'metadata_field': 'metadataField',  # noqa: E501
        'group_rights': 'groupRights',  # noqa: E501
        'search_filter': 'searchFilter',  # noqa: E501
        'admin_password': 'adminPassword',  # noqa: E501
        'user_base': 'userBase',  # noqa: E501
        'server_urls': 'serverUrls',  # noqa: E501
        'admin_username': 'adminUsername',  # noqa: E501
        'profile_url': 'profileURL',  # noqa: E501
        'authorize_url': 'authorizeURL',  # noqa: E501
        'request_token_url': 'requestTokenURL',  # noqa: E501
        'http_method': 'httpMethod',  # noqa: E501
        'consumer_secret': 'consumerSecret',  # noqa: E501
        'access_token_url': 'accessTokenURL',  # noqa: E501
        'callback_url': 'callbackURL',  # noqa: E501
        'consumer_key': 'consumerKey',  # noqa: E501
        'validate_signature': 'validateSignature',  # noqa: E501
        'sso_protocol_binding': 'ssoProtocolBinding',  # noqa: E501
        'validating_certificates': 'validatingCertificates',  # noqa: E501
        'signature': 'signature',  # noqa: E501
        'credentials': 'credentials',  # noqa: E501
        'validate_assertions': 'validateAssertions',  # noqa: E501
        'issuer': 'issuer',  # noqa: E501
        'used_name_idas_email': 'usedNameIDAsEmail',  # noqa: E501
        'single_logout_url': 'singleLogoutUrl',  # noqa: E501
        'email_attribute_name': 'emailAttributeName',  # noqa: E501
        'single_sign_on_url': 'singleSignOnUrl',  # noqa: E501
        'name_id_format': 'nameIDFormat',  # noqa: E501
        'single_logout_protocol_binding': 'singleLogoutProtocolBinding',  # noqa: E501
    }

    read_only_vars = {
    }

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """OtoroshiAuthAuthModuleConfig - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            session_max_age (int): Max age of the session. [optional]  # noqa: E501
            metadata ({str: (str,)}): Metadata of the SAML module. [optional]  # noqa: E501
            session_cookie_values (OtoroshiAuthSessionCookieValues): [optional]  # noqa: E501
            basic_auth (bool): Use standard basic auth or web login form. [optional]  # noqa: E501
            name (str): Name of the SAML module. [optional]  # noqa: E501
            webauthn (bool): Use webauthn for login. [optional]  # noqa: E501
            location (OtoroshiModelsEntityLocation): [optional]  # noqa: E501
            id (str): Id of the SAML Auth module. [optional]  # noqa: E501
            type (str): the type of the module. [optional]  # noqa: E501
            users ([OtoroshiAuthBasicAuthUser]): Users attached to the module. [optional]  # noqa: E501
            desc (str): Description of the SAML Auth module. [optional]  # noqa: E501
            tags ([str]): SAML module tags. [optional]  # noqa: E501
            refresh_tokens (bool): Refresh token support. [optional]  # noqa: E501
            token_url (str): OAuth token URL. [optional]  # noqa: E501
            mtls_config (OtoroshiUtilsHttpMtlsConfig): [optional]  # noqa: E501
            name_field (str): Field name to get name from user profile. [optional]  # noqa: E501
            email_field (str): Field name to get email from user profile. [optional]  # noqa: E501
            introspection_url (str): URL to introspect access_token. [optional]  # noqa: E501
            login_url (str): OAuth login URL. [optional]  # noqa: E501
            scope (str): The scope of the token. [optional]  # noqa: E501
            rights_override ({str: (OtoroshiModelsUserRights,)}): Overrides user rights of users connected by OAuth1 module. [optional]  # noqa: E501
            callback_url (str): Otoroshi callback URL. [optional]  # noqa: E501
            client_secret (str): OAuth Client secret. [optional]  # noqa: E501
            extra_metadata ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): Add metadata to user. Object with email as key. [optional]  # noqa: E501
            access_token_field (str): Field name to get access token. [optional]  # noqa: E501
            user_info_url (str): OAuth userinfo to get user profile. [optional]  # noqa: E501
            client_id (str): OAuth Client id. [optional]  # noqa: E501
            use_cookie (bool): Use cookies for redirection. [optional]  # noqa: E501
            authorize_url (str): OAuth authorize URL. [optional]  # noqa: E501
            data_override ({str: ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},)}): Overiddes user data. Object with email as key. [optional]  # noqa: E501
            super_admins (bool): This module produces only super admins. [optional]  # noqa: E501
            api_key_meta_field (str): Field name to extract apikey metadata. [optional]  # noqa: E501
            use_json (bool): Use JSON or URL Form Encoded as payload with the OAuth provider. [optional]  # noqa: E501
            api_key_tags_field (str): Field name to extract apikey tags. [optional]  # noqa: E501
            otoroshi_data_field (str): Field name to get otoroshi metadata from. You can specify sub fields using | as separator. [optional]  # noqa: E501
            jwt_verifier (dict): Algo. settings to verify JWT token. [optional]  # noqa: E501
            proxy (dict): Web proxy configuration for the module's http client. [optional]  # noqa: E501
            logout_url (str): OAuth logout URL. [optional]  # noqa: E501
            oid_config (dict): URL of the OIDC config. file. [optional]  # noqa: E501
            read_profile_from_token (bool): The user profile will be read from the JWT token in id_token. [optional]  # noqa: E501
            claims (str): The claims of the token. [optional]  # noqa: E501
            group_filters ([OtoroshiAuthGroupFilter]): LDAP group filters. [optional]  # noqa: E501
            allow_empty_password (bool): Allow empty password access. [optional]  # noqa: E501
            search_base (str): LDAP search base. [optional]  # noqa: E501
            metadata_field (dict): Field name to get metadata from user profile. [optional]  # noqa: E501
            group_rights ({str: (OtoroshiAuthGroupRights,)}): Rights associated with groups. [optional]  # noqa: E501
            search_filter (str): Filter for users. [optional]  # noqa: E501
            admin_password (dict): The admin password. [optional]  # noqa: E501
            user_base (dict): LDAP user base DN. [optional]  # noqa: E501
            server_urls ([str]): LDAP server list of url. [optional]  # noqa: E501
            admin_username (dict): The admin username. [optional]  # noqa: E501
            profile_url (str): URL fetch by otoroshi to get user information from identity provider. [optional]  # noqa: E501
            authorize_url (str): The authorize URL used to initiates the authorization flow that authenticates the user with the Identity Provider. [optional]  # noqa: E501
            request_token_url (str): URL fetch to get a request token during the first step of the authorization OAuth 1 flow. [optional]  # noqa: E501
            http_method ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): Method used to get request and access token. [optional]  # noqa: E501
            consumer_secret (str): Client secret obtained from identity provider configuration. [optional]  # noqa: E501
            access_token_url (str): Endpoint requested by otoroshi to get access token during the authorization OAuth1 flow. [optional]  # noqa: E501
            callback_url (str): The location where the identity provider returns a browser after the user finishes authenticating with their IDP. [optional]  # noqa: E501
            consumer_key (str): Client ID obtained on identity provider. [optional]  # noqa: E501
            validate_signature (bool): Indicates if SAML response signature has to be validate when otoroshi got SAML responses from identity provider. [optional]  # noqa: E501
            sso_protocol_binding ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): Protocol binding used during SAML requests. [optional]  # noqa: E501
            validating_certificates ([str]): Certificates used to validate SAML response signature. [optional]  # noqa: E501
            signature (OtoroshiAuthSAMLSignature): [optional]  # noqa: E501
            credentials (OtoroshiAuthSAMLCredentials): [optional]  # noqa: E501
            validate_assertions (bool): Indicates if assertions have to be validate when otoroshi got SAML responses from identity provider. [optional]  # noqa: E501
            issuer (str): Issuer of the SAML requests. [optional]  # noqa: E501
            used_name_idas_email (bool): Is name ID used as email ?. [optional]  # noqa: E501
            single_logout_url (str): URL used by otoroshi to disconnect users from identity provider. [optional]  # noqa: E501
            email_attribute_name (dict): Field name to find email in user profile returned by identity provider. [optional]  # noqa: E501
            single_sign_on_url (str): URL used by otoroshi to redirect users to identity provider login page. [optional]  # noqa: E501
            name_id_format ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): The name ID Format to use for the subject. [optional]  # noqa: E501
            single_logout_protocol_binding ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): Protocol binding used during SAML requests. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        constant_args = {
            '_check_type': _check_type,
            '_path_to_item': _path_to_item,
            '_spec_property_naming': _spec_property_naming,
            '_configuration': _configuration,
            '_visited_composed_classes': self._visited_composed_classes,
        }
        composed_info = validate_get_composed_info(
            constant_args, kwargs, self)
        self._composed_instances = composed_info[0]
        self._var_name_to_model_instances = composed_info[1]
        self._additional_properties_model_instances = composed_info[2]
        discarded_args = composed_info[3]

        for var_name, var_value in kwargs.items():
            if var_name in discarded_args and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self._additional_properties_model_instances:
                # discard variable.
                continue
            setattr(self, var_name, var_value)

        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
        '_composed_instances',
        '_var_name_to_model_instances',
        '_additional_properties_model_instances',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """OtoroshiAuthAuthModuleConfig - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            session_max_age (int): Max age of the session. [optional]  # noqa: E501
            metadata ({str: (str,)}): Metadata of the SAML module. [optional]  # noqa: E501
            session_cookie_values (OtoroshiAuthSessionCookieValues): [optional]  # noqa: E501
            basic_auth (bool): Use standard basic auth or web login form. [optional]  # noqa: E501
            name (str): Name of the SAML module. [optional]  # noqa: E501
            webauthn (bool): Use webauthn for login. [optional]  # noqa: E501
            location (OtoroshiModelsEntityLocation): [optional]  # noqa: E501
            id (str): Id of the SAML Auth module. [optional]  # noqa: E501
            type (str): the type of the module. [optional]  # noqa: E501
            users ([OtoroshiAuthBasicAuthUser]): Users attached to the module. [optional]  # noqa: E501
            desc (str): Description of the SAML Auth module. [optional]  # noqa: E501
            tags ([str]): SAML module tags. [optional]  # noqa: E501
            refresh_tokens (bool): Refresh token support. [optional]  # noqa: E501
            token_url (str): OAuth token URL. [optional]  # noqa: E501
            mtls_config (OtoroshiUtilsHttpMtlsConfig): [optional]  # noqa: E501
            name_field (str): Field name to get name from user profile. [optional]  # noqa: E501
            email_field (str): Field name to get email from user profile. [optional]  # noqa: E501
            introspection_url (str): URL to introspect access_token. [optional]  # noqa: E501
            login_url (str): OAuth login URL. [optional]  # noqa: E501
            scope (str): The scope of the token. [optional]  # noqa: E501
            rights_override ({str: (OtoroshiModelsUserRights,)}): Overrides user rights of users connected by OAuth1 module. [optional]  # noqa: E501
            callback_url (str): Otoroshi callback URL. [optional]  # noqa: E501
            client_secret (str): OAuth Client secret. [optional]  # noqa: E501
            extra_metadata ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): Add metadata to user. Object with email as key. [optional]  # noqa: E501
            access_token_field (str): Field name to get access token. [optional]  # noqa: E501
            user_info_url (str): OAuth userinfo to get user profile. [optional]  # noqa: E501
            client_id (str): OAuth Client id. [optional]  # noqa: E501
            use_cookie (bool): Use cookies for redirection. [optional]  # noqa: E501
            authorize_url (str): OAuth authorize URL. [optional]  # noqa: E501
            data_override ({str: ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},)}): Overiddes user data. Object with email as key. [optional]  # noqa: E501
            super_admins (bool): This module produces only super admins. [optional]  # noqa: E501
            api_key_meta_field (str): Field name to extract apikey metadata. [optional]  # noqa: E501
            use_json (bool): Use JSON or URL Form Encoded as payload with the OAuth provider. [optional]  # noqa: E501
            api_key_tags_field (str): Field name to extract apikey tags. [optional]  # noqa: E501
            otoroshi_data_field (str): Field name to get otoroshi metadata from. You can specify sub fields using | as separator. [optional]  # noqa: E501
            jwt_verifier (dict): Algo. settings to verify JWT token. [optional]  # noqa: E501
            proxy (dict): Web proxy configuration for the module's http client. [optional]  # noqa: E501
            logout_url (str): OAuth logout URL. [optional]  # noqa: E501
            oid_config (dict): URL of the OIDC config. file. [optional]  # noqa: E501
            read_profile_from_token (bool): The user profile will be read from the JWT token in id_token. [optional]  # noqa: E501
            claims (str): The claims of the token. [optional]  # noqa: E501
            group_filters ([OtoroshiAuthGroupFilter]): LDAP group filters. [optional]  # noqa: E501
            allow_empty_password (bool): Allow empty password access. [optional]  # noqa: E501
            search_base (str): LDAP search base. [optional]  # noqa: E501
            metadata_field (dict): Field name to get metadata from user profile. [optional]  # noqa: E501
            group_rights ({str: (OtoroshiAuthGroupRights,)}): Rights associated with groups. [optional]  # noqa: E501
            search_filter (str): Filter for users. [optional]  # noqa: E501
            admin_password (dict): The admin password. [optional]  # noqa: E501
            user_base (dict): LDAP user base DN. [optional]  # noqa: E501
            server_urls ([str]): LDAP server list of url. [optional]  # noqa: E501
            admin_username (dict): The admin username. [optional]  # noqa: E501
            profile_url (str): URL fetch by otoroshi to get user information from identity provider. [optional]  # noqa: E501
            authorize_url (str): The authorize URL used to initiates the authorization flow that authenticates the user with the Identity Provider. [optional]  # noqa: E501
            request_token_url (str): URL fetch to get a request token during the first step of the authorization OAuth 1 flow. [optional]  # noqa: E501
            http_method ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): Method used to get request and access token. [optional]  # noqa: E501
            consumer_secret (str): Client secret obtained from identity provider configuration. [optional]  # noqa: E501
            access_token_url (str): Endpoint requested by otoroshi to get access token during the authorization OAuth1 flow. [optional]  # noqa: E501
            callback_url (str): The location where the identity provider returns a browser after the user finishes authenticating with their IDP. [optional]  # noqa: E501
            consumer_key (str): Client ID obtained on identity provider. [optional]  # noqa: E501
            validate_signature (bool): Indicates if SAML response signature has to be validate when otoroshi got SAML responses from identity provider. [optional]  # noqa: E501
            sso_protocol_binding ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): Protocol binding used during SAML requests. [optional]  # noqa: E501
            validating_certificates ([str]): Certificates used to validate SAML response signature. [optional]  # noqa: E501
            signature (OtoroshiAuthSAMLSignature): [optional]  # noqa: E501
            credentials (OtoroshiAuthSAMLCredentials): [optional]  # noqa: E501
            validate_assertions (bool): Indicates if assertions have to be validate when otoroshi got SAML responses from identity provider. [optional]  # noqa: E501
            issuer (str): Issuer of the SAML requests. [optional]  # noqa: E501
            used_name_idas_email (bool): Is name ID used as email ?. [optional]  # noqa: E501
            single_logout_url (str): URL used by otoroshi to disconnect users from identity provider. [optional]  # noqa: E501
            email_attribute_name (dict): Field name to find email in user profile returned by identity provider. [optional]  # noqa: E501
            single_sign_on_url (str): URL used by otoroshi to redirect users to identity provider login page. [optional]  # noqa: E501
            name_id_format ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): The name ID Format to use for the subject. [optional]  # noqa: E501
            single_logout_protocol_binding ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): Protocol binding used during SAML requests. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        constant_args = {
            '_check_type': _check_type,
            '_path_to_item': _path_to_item,
            '_spec_property_naming': _spec_property_naming,
            '_configuration': _configuration,
            '_visited_composed_classes': self._visited_composed_classes,
        }
        composed_info = validate_get_composed_info(
            constant_args, kwargs, self)
        self._composed_instances = composed_info[0]
        self._var_name_to_model_instances = composed_info[1]
        self._additional_properties_model_instances = composed_info[2]
        discarded_args = composed_info[3]

        for var_name, var_value in kwargs.items():
            if var_name in discarded_args and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self._additional_properties_model_instances:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")

    @cached_property
    def _composed_schemas():
        # we need this here to make our import statements work
        # we must store _composed_schemas in here so the code is only run
        # when we invoke this method. If we kept this at the class
        # level we would get an error beause the class level
        # code would be run when this module is imported, and these composed
        # classes don't exist yet because their module has not finished
        # loading
        lazy_import()
        return {
          'anyOf': [
          ],
          'allOf': [
          ],
          'oneOf': [
              OtoroshiAuthBasicAuthModuleConfig,
              OtoroshiAuthGenericOauth2ModuleConfig,
              OtoroshiAuthLdapAuthModuleConfig,
              OtoroshiAuthOauth1ModuleConfig,
              OtoroshiAuthSamlAuthModuleConfig,
          ],
        }
